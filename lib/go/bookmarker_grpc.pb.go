// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookmarkerClient is the client API for Bookmarker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookmarkerClient interface {
	GetBookmarks(ctx context.Context, in *GetBookmarksRequest, opts ...grpc.CallOption) (*GetBookmarksResponse, error)
}

type bookmarkerClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarkerClient(cc grpc.ClientConnInterface) BookmarkerClient {
	return &bookmarkerClient{cc}
}

func (c *bookmarkerClient) GetBookmarks(ctx context.Context, in *GetBookmarksRequest, opts ...grpc.CallOption) (*GetBookmarksResponse, error) {
	out := new(GetBookmarksResponse)
	err := c.cc.Invoke(ctx, "/Bookmarker/GetBookmarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarkerServer is the server API for Bookmarker service.
// All implementations must embed UnimplementedBookmarkerServer
// for forward compatibility
type BookmarkerServer interface {
	GetBookmarks(context.Context, *GetBookmarksRequest) (*GetBookmarksResponse, error)
	mustEmbedUnimplementedBookmarkerServer()
}

// UnimplementedBookmarkerServer must be embedded to have forward compatible implementations.
type UnimplementedBookmarkerServer struct {
}

func (UnimplementedBookmarkerServer) GetBookmarks(context.Context, *GetBookmarksRequest) (*GetBookmarksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmarks not implemented")
}
func (UnimplementedBookmarkerServer) mustEmbedUnimplementedBookmarkerServer() {}

// UnsafeBookmarkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarkerServer will
// result in compilation errors.
type UnsafeBookmarkerServer interface {
	mustEmbedUnimplementedBookmarkerServer()
}

func RegisterBookmarkerServer(s grpc.ServiceRegistrar, srv BookmarkerServer) {
	s.RegisterService(&Bookmarker_ServiceDesc, srv)
}

func _Bookmarker_GetBookmarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkerServer).GetBookmarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bookmarker/GetBookmarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkerServer).GetBookmarks(ctx, req.(*GetBookmarksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookmarker_ServiceDesc is the grpc.ServiceDesc for Bookmarker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookmarker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bookmarker",
	HandlerType: (*BookmarkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookmarks",
			Handler:    _Bookmarker_GetBookmarks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/bookmarker.proto",
}
